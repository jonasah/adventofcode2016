// Advent of Code 2016, Day 2, Part Two

#include <iostream>
#include <stdexcept>

constexpr const char* input[] = {
  "RDLRUUULRRDLRLLRLDDUDLULULDDULUDRRUURLRLLUULDURRULLRULDRRDLLULLRLLDRLDDRRRRLLRLURRRDRDULRDUULDDDULURUDDRRRUULUDRLLUUURLUDRUUUDRDUULLRLLUDDRURRDDDRDLUUURLRLLUDRURDUDUULDDLLRDURULLLURLDURLUUULDULDDULULLLRRUDLRUURDRDLLURLUDULDUUUURRLDLUDRULUDLDLLDRLDDDRRLLDUDLLRRDDDRLUDURLLLDRUDDLDDRRLUDRRDUDLRRLULDULURULDULUULDRLLDRUUDDRLLUDRULLRRRLRDLRLUDLRULDRDLRDRLRULUDUURRUUULLDDDDUDDLDDDDRRULRDLRDDULLDLDLLDLLDLLDRRDDDRDDLRRDDDRLLLLURRDLRRLDRURDDURDULDDRUURUDUDDDRDRDDRLRRLRULLDRLDLURLRLRUDURRRDLLLUDRLRDLLDDDLLUDRLDRRUUDUUDULDULLRDLUDUURLDDRUDR",
  "URULDDLDDUDLLURLUUUUUULUDRRRDDUDURDRUURLLDRURLUULUDRDRLLDRLDULRULUURUURRLRRDRUUUDLLLLRUDDLRDLLDUDLLRRURURRRUDLRLRLLRULRLRLRDLRLLRRUDDRLRUDULDURDLDLLLRDRURURRULLLDLLRRDRLLDUUDLRUUDDURLLLDUUDLRDDURRDRRULLDRLRDULRRLLRLLLLUDDDRDRULRRULLRRUUDULRRRUDLLUUURDUDLLLURRDDUDLDLRLURDDRRRULRRUDRDRDULURULRUDULRRRLRUDLDDDDRUULURDRRDUDLULLRUDDRRRLUDLRURUURDLDURRDUUULUURRDULLURLRUUUUULULLDRURULDURDDRRUDLRLRRLLLLDDUURRULLURURRLLDRRDDUUDLLUURRDRLLLLRLUDUUUDLRLRRLDURDRURLRLRULURLDULLLRRUUUDLLRRDUUULULDLLDLRRRDUDDLRULLULLULLULRU",
  "DURUUDULRRLULLLDDUDDLRRDURURRRDDRRURDRURDRLULDUDUDUULULDDUURDDULRDUDUDRRURDRDDRLDRDRLDULDDULRULLDULURLUUDUDULRDDRRLURLLRRDLLDLDURULUDUDULDRLLRRRUDRRDDDRRDRUUURLDLURDLRLLDUULLRULLDDDDRULRRLRDLDLRLUURUUULRDUURURLRUDRDDDRRLLRLLDLRULUULULRUDLUDULDLRDDDDDRURDRLRDULRRULRDURDDRRUDRUDLUDLDLRUDLDDRUUULULUULUUUDUULDRRLDUDRRDDLRUULURLRLULRURDDLLULLURLUDLULRLRRDDDDDRLURURURDRURRLLLLURLDDURLLURDULURUUDLURUURDLUUULLLLLRRDUDLLDLUUDURRRURRUUUDRULDDLURUDDRRRDRDULURURLLDULLRDDDRRLLRRRDRLUDURRDLLLLDDDDLUUURDDDDDDLURRURLLLUURRUDLRLRRRURULDRRLULD",
  "LLUUURRDUUDRRLDLRUDUDRLRDLLRDLLDRUULLURLRRLLUDRLDDDLLLRRRUDULDLLLDRLURDRLRRLURUDULLRULLLURRRRRDDDLULURUDLDUDULRRLUDDURRLULRRRDDUULRURRUULUURDRLLLDDRDDLRRULRDRDRLRURULDULRRDRLDRLLDRDURUUULDLLLRDRRRLRDLLUDRDRLURUURDLRDURRLUDRUDLURDRURLRDLULDURDDURUUDRLULLRLRLDDUDLLUUUURLRLRDRLRRRURLRULDULLLLDLRRRULLUUDLDURUUUDLULULRUDDLLDLDLRLDDUDURDRLLRRLRRDDUDRRRURDLRLUUURDULDLURULUDULRRLDUDLDDDUUDRDUULLDDRLRLLRLLLLURDDRURLDDULLULURLRDUDRDDURLLLUDLLLLLUDRDRDLURRDLUDDLDLLDDLUDRRDDLULRUURDRULDDDLLRLDRULURLRURRDDDRLUUDUDRLRRUDDLRDLDULULDDUDURRRURULRDDDUUDULLULDDRDUDRRDRDRDLRRDURURRRRURULLLRRLR",
  "URLULLLDRDDULRRLRLUULDRUUULDRRLLDDDLDUULLDRLULRRDRRDDDRRDLRRLLDDRDULLRRLLUDUDDLDRDRLRDLRDRDDUUDRLLRLULLULRDRDDLDDDRLURRLRRDLUDLDDDLRDLDLLULDDRRDRRRULRUUDUULDLRRURRLLDRDRRDDDURUDRURLUDDDDDDLLRLURULURUURDDUDRLDRDRLUUUULURRRRDRDULRDDDDRDLLULRURLLRDULLUUDULULLLLRDRLLRRRLLRUDUUUULDDRULUDDDRRRULUDURRLLDURRDULUDRUDDRUURURURLRDULURDDDLURRDLDDLRUDUUDULLURURDLDURRDRDDDLRRDLLULUDDDRDLDRDRRDRURRDUDRUURLRDDUUDLURRLDRRDLUDRDLURUDLLRRDUURDUDLUDRRL"
};

class Keypad {
public:
  constexpr void tryMoveUp() { if (m_row > 0 && valid(m_row-1, m_col)) --m_row; }
  constexpr void tryMoveDown() { if (m_row < 4 && valid(m_row+1, m_col)) ++m_row; }
  constexpr void tryMoveLeft() { if (m_col > 0 && valid(m_row, m_col-1)) --m_col; }
  constexpr void tryMoveRight() { if (m_col < 4 && valid(m_row, m_col+1)) ++m_col; }
  
  constexpr auto getKey() const { return layout[m_row][m_col]; }
  
private:
  constexpr bool valid(int row, int col) const {
    return layout[row][col] != 0;
  }
  
  constexpr static char layout[5][5] = {
    { 0, 0, '1', 0, 0 },
    { 0, '2', '3', '4', 0 },
    { '5', '6', '7', '8', '9' },
    { 0, 'A', 'B', 'C', 0 },
    { 0, 0, 'D', 0, 0 }
  };
  
  // zero-based
  int m_row = 2, m_col = 0;
};

template <typename T, std::size_t N>
class Array {
public:
  constexpr const T* begin() const { return &data[0]; }
  constexpr const T* end() const { return &data[0] + N; }
  
  constexpr auto& operator[](std::size_t pos) { return data[pos]; }
  constexpr auto& operator[](std::size_t pos) const { return data[pos]; }
  
private:
  T data[N] = { T() };
};

constexpr auto stringLength(const char* str) {
  auto len = 0;
  
  while (str[0] != '\0') {
    ++len;
    ++str;
  }
  
  return len;
}

constexpr auto getKey(const char* str) {
  Keypad keypad;
  
  const auto len = stringLength(str);
  
  for (auto i = 0; i < len; ++i) {
    switch (str[i]) {
      case 'R':
        keypad.tryMoveRight();
        break;
      case 'D':
        keypad.tryMoveDown();
        break;
      case 'L':
        keypad.tryMoveLeft();
        break;
      case 'U':
        keypad.tryMoveUp();
        break;
      default:
        throw std::invalid_argument("");
    }
  }
  
  return keypad.getKey();
}

constexpr auto getCode() {
  const auto num_keys = sizeof(input)/sizeof(input[0]);
  Array<char, num_keys> code;
  
  for (auto i = 0u; i < num_keys; ++i) {
    code[i] = getKey(input[i]);
  }
  
  return code;
}

int main() {
  constexpr auto code = getCode();
  
  for (const auto key : code) {
    std::cout << key;
  }
  
  std::cout << '\n';
  
  return 0;
}
